apply plugin: 'com.android.library'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'progressbutton'

    publishedGroupId = 'be.appfoundry.progressbuttonlibrary'
    libraryName = 'progressbutton'
    artifact = 'progressbutton'

    libraryDescription = 'A circular progress button for Android'

    siteUrl = 'https://github.com/appfoundry/progress-button'
    gitUrl = 'https://github.com/appfoundry/progress-button.git'

    libraryVersion = '0.9.3'

    developerId = 'appfoundry'
    developerName = 'AppFoundry'
    developerEmail = 'info@appfoundry.be'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "0.9.3"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.android.support:support-annotations:23.3.0'
}

apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'


check.dependsOn 'pmd'
check.dependsOn 'findbugs'
check.dependsOn 'checkstyle'

task pmd(type: Pmd) {

    description "Generate PMD reports for this build"

    ignoreFailures true    // Ignores failing build on warning. If not set build will fail on warning.

    ruleSets = [
            "java-basic",
            "java-braces",
            "java-naming",
            "java-android",
            "java-codesize",
            "java-design",
            "java-finalizers",
            "java-junit",
            "java-optimizations",
            "java-strictexception",
            "java-strings",
            "java-unusedcode"
    ]

    source 'src'          // Specify the source code. The script should be applied to
    include '**/*.java'   // the module build.gradle so the 'src' folder resides at the same level
    exclude '**/gen/**'   // include / exclude folders and files.

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task findbugs(type: FindBugs) {

    description 'Generate FindBugs reports for this build'

    ignoreFailures true

    //Higher levels increase precision and find more bugs at the expense of running time and memory consumption.
    effort = 'max'
    //The priority threshold for reporting bugs. If set to {@code low}, all bugs are reported.
    reportLevel = 'low'

    //Define path to classes
    classes = fileTree("${project.rootDir}/app/build/intermediates/classes") //path to compiled class files

    source 'src'          // Specify the source code. The script should be applied to
    include '**/*.java'   // the module build.gradle so the 'src' folder resides at the same level
    exclude '**/gen/**'   // include / exclude folders and files.

    //Define exclude config file
    excludeFilter = file("${rootProject.projectDir}/gradle/config/findbugs/exclude.xml")

    //IMPORTANT: FINDBUGS CAN ONLY GENERATE 1 REPORT. XML OR HTML!! AND PATH MUST BE DEFINED!!
    reports {
        xml.enabled = false
        html.enabled = true
        xml.destination = "$project.buildDir/reports/findbugs/findbugs-output.xml"
        html.destination = "$project.buildDir/reports/findbugs/findbugs-output.html"
    }

    classpath = files()
}

task checkstyle(type: Checkstyle) {

    description "Generate Checkstyle reports for this build"     //Add description to task

    ignoreFailures true

    configFile file("${rootProject.projectDir}/gradle/config/checkstyle/checkstyle.xml")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**', '**/test/**'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    classpath = files(file("${project.rootDir}/app/build/intermediates/classes"))
}